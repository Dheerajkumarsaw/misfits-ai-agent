apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-agent
  namespace: ai-agent-prod
  labels:
    app: ai-agent
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ai-agent
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: ai-agent
        version: v1
    spec:
      containers:
      - name: ai-agent
        # UPDATE THIS WITH YOUR DOCKER HUB USERNAME
        image: dsaw1/ai-agent:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        # Load environment variables from ConfigMap
        - name: CHROMA_HOST
          valueFrom:
            configMapKeyRef:
              name: ai-agent-config
              key: CHROMA_HOST
        - name: CHROMA_PORT
          valueFrom:
            configMapKeyRef:
              name: ai-agent-config
              key: CHROMA_PORT
        - name: OPENAI_BASE_URL
          valueFrom:
            configMapKeyRef:
              name: ai-agent-config
              key: OPENAI_BASE_URL
        - name: TRANSFORMERS_OFFLINE
          valueFrom:
            configMapKeyRef:
              name: ai-agent-config
              key: TRANSFORMERS_OFFLINE
        - name: HF_HUB_OFFLINE
          valueFrom:
            configMapKeyRef:
              name: ai-agent-config
              key: HF_HUB_OFFLINE
        # Load secrets
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: ai-agent-secrets
              key: OPENAI_API_KEY
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/readiness
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
      # Optional: Add init container to wait for ChromaDB
      initContainers:
      - name: wait-for-chroma
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - >
          until nc -z 43.205.192.16 8000;
          do echo "Waiting for ChromaDB...";
          sleep 5;
          done;
          echo "ChromaDB is available!"